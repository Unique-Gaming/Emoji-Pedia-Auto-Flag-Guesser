(async()=>{const e={"x-client":"emojipedia.org","content-type":"application/json"},a=prompt("Enter your nickname (MAXIMUM AND MINIMUM 3 ALPHABETS IN CAPITAL):");if(!/^[A-Z]{3}$/.test(a))return void alert("❌ Nickname must be exactly 3 capital letters (A-Z).");const i={"st barthelemy":["saint barthélemy","saint barthelemy","st. barthélemy"],reunion:["réunion"],"canary islands":["canary"]},n={"bosnia herzegovina":"Bosnia and Herzegovina","cote divoire":"Côte d'Ivoire","ivory coast":"Côte d'Ivoire","cape verde":"Cabo Verde",czechia:"Czech Republic","north korea":"Korea, North","south korea":"Korea, South",uk:"United Kingdom",england:"United Kingdom",scotland:"United Kingdom",wales:"United Kingdom",usa:"United States",us:"United States","u.s.a":"United States",laos:"Lao People's Democratic Republic",vatican:"Vatican City",eswatini:"Swaziland",burma:"Myanmar","timor leste":"East Timor","saint kitts":"Saint Kitts and Nevis","st kitts":"Saint Kitts and Nevis","saint lucia":"Saint Lucia","st lucia":"Saint Lucia","saint vincent":"Saint Vincent and the Grenadines","st vincent":"Saint Vincent and the Grenadines",brunei:"Brunei Darussalam",iran:"Iran, Islamic Republic of",syria:"Syrian Arab Republic",palestine:"State of Palestine",russia:"Russian Federation",moldova:"Republic of Moldova",tanzania:"United Republic of Tanzania",venezuela:"Venezuela, Bolivarian Republic of",bolivia:"Bolivia, Plurinational State of",micronesia:"Federated States of Micronesia","são tomé":"São Tomé and Príncipe","sao tome":"São Tomé and Príncipe",antigua:"Antigua and Barbuda",dominica:"Commonwealth of Dominica","us virgin islands":"United States Virgin Islands","u.s. virgin islands":"United States Virgin Islands","u s virgin islands":"United States Virgin Islands",usvi:"United States Virgin Islands","u.s.vi":"United States Virgin Islands","virgin islands (u.s.)":"United States Virgin Islands","virgin islands (us)":"United States Virgin Islands","virgin islands us":"United States Virgin Islands","american virgin islands":"United States Virgin Islands"};async function t(a){return(await fetch("https://emojipedia.org/api/graphql",{method:"POST",headers:e,body:JSON.stringify(a)})).json()}function o(e,a){e=function(e){let a=e.toLowerCase().trim();return n[a]||e}(e);for(let i of a)if(i.country.trim().toLowerCase()===e.toLowerCase())return i.id;let t=e.toLowerCase();if(i[t])for(let e of i[t])for(let i of a)if(i.country.trim().toLowerCase()===e.toLowerCase())return i.id;for(let i of a)if(i.country.toLowerCase().includes(e.toLowerCase())||e.toLowerCase().includes(i.country.toLowerCase()))return i.id;return a[0].id}const s={query:"mutation MiniGames_CreateGame_v1($type: GameType!) { \n            MiniGames_CreateGame_v1(type: $type) { \n                ...gameResource \n            } \n        } \n        fragment gameResource on Game { \n            id type state secondsPerQuestion totalQuestions currentQuestion { \n                type index issueServerTime \n                ... on FlagGameQuestion { flagImage options { id country } } \n            } points correctAnswers timePassedSeconds \n        }",variables:{type:"GUESS_THE_FLAG"},operationName:"MiniGames_CreateGame_v1"},r=await t(s);if(!r.data?.MiniGames_CreateGame_v1?.id)return void console.error("Failed to create game",r);const d=r.data.MiniGames_CreateGame_v1.id;console.log(`Game created successfully. Game ID: ${d}`);let m=r.data.MiniGames_CreateGame_v1.currentQuestion,u=0;for(let e=0;e<15;e++){if(await t({query:"mutation MiniGames_StartQuestion_v1($gameId: ID!) { \n                MiniGames_StartQuestion_v1(gameId: $gameId) \n            }",variables:{gameId:d},operationName:"MiniGames_StartQuestion_v1"}),console.log(`Question ${e+1} started`),!m?.flagImage)return void console.error("Invalid question format",m);const a=m.flagImage,i=m.options,n=a.match(/flag-(.*?)_/);let s=n?n[1].replace(/-/g," "):"",r=o(s,i);console.log(`Flag is ${s}, selecting option ${r}`);const l=await t({query:"mutation MiniGames_SubmitAnswer_v1($gameId: ID!, $optionId: ID!) { \n                MiniGames_SubmitAnswer_v1(gameId: $gameId, optionId: $optionId) { \n                    points outcome correctAnswerId \n                } \n            }",variables:{gameId:d,optionId:r},operationName:"MiniGames_SubmitAnswer_v1"});let c=l.data?.MiniGames_SubmitAnswer_v1?.outcome,g=l.data?.MiniGames_SubmitAnswer_v1?.points;"CORRECT"===c&&u++,console.log(`Answer submitted. Outcome: ${c}, Total Points: ${g}`);const v=await t({query:"mutation
